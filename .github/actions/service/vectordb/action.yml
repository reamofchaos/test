name: "milvus"
description: "stop, clean and start milvus in order"
inputs:
    stop:
        description: "whether to stop"
        required: true
    clean:
        description: "whether to clean"
        required: true
    start:
        description: "whether to start"
        required: true
    ports:
        description: "ports to run on"
        required: false
        default: "19530"
    Root-Dir-Path:
      description: "the path of IGinX root directory"
      required: false
      default: "${GITHUB_WORKSPACE}"

runs:
    using: "composite"
    steps:
        - if: fromJSON(inputs.stop) || fromJSON(inputs.clean)
          name: unimplemented
          shell: bash
          run: exit 1

        - name: Setup docker compose
          uses: ./.github/actions/docker-compose

        - if: fromJSON(inputs.start)
          name: Create Config for milvus docker compose
          shell: bash
          working-directory: ${{ github.workspace }}
          run: |
              pwd
              whoami
              echo ${{ github.workspace }}
              for port in ${{ inputs.ports }}; do
                mkdir -p $port
                cp -f docker/milvus/docker-compose.yml $port/docker-compose-$port.yml
                sed -i"" -e "s/19530:19530/$port:19530/g" $port/docker-compose-$port.yml
                sed -i"" -e "s/\/volumes/\/volumes$port/g" $port/docker-compose-$port.yml
                sed -i"" -e "s/name: milvus/name: milvus$port/g" $port/docker-compose-$port.yml
              done
              echo "docker-compose.yml created successfully"

        - if: fromJSON(inputs.start) && runner.os == 'Windows'
          name: Start milvus on Windows
          shell: wsl-run {0}
          working-directory: ${{ github.workspace }}
          run: |
            for port in ${{ inputs.ports }}; do
              sudo chown -R $(whoami) $port/
              sudo nohup docker-compose -f $port/docker-compose-$port.yml up -d
            done
            sleep 5
            for port in ${{ inputs.ports }}; do
              if netstat -an | grep -q ".*:$port.*LISTEN"; then
                echo "Port $port is open."
              else
                echo "Port $port is not open."
              fi
            done
            docker ps -a
#            docker logs milvus19530-standalone
#            docker logs milvus19530-minio
#            docker logs milvus19530-etcd
            
        - if: fromJSON(inputs.start) && runner.os != 'Windows'
          name: Start milvus
          shell: bash
          working-directory: ${{ github.workspace }}
          run: |
            for port in ${{ inputs.ports }}; do
              sudo chown -R $(whoami) $port/
              sudo nohup docker-compose -f $port/docker-compose-$port.yml up -d
            done
            sleep 5
            for port in ${{ inputs.ports }}; do
              if netstat -an | grep -q ".*:$port.*LISTEN"; then
                echo "Port $port is open."
              else
                echo "Port $port is not open."
              fi
            done
            docker ps -a

        - if: fromJSON(inputs.start) && runner.os != 'Windows'
          name: show logs
          shell: bash
          working-directory: ${{ github.workspace }}
          run: |
            docker ps
            for port in ${{ inputs.ports }}; do
              if netstat -an | grep -q ".*:$port.*LISTEN"; then
                echo "Port $port is open."
              else
                echo "Port $port is not open."
              fi
            done
#            docker logs milvus19530-standalone
#            docker logs milvus19530-minio
#            docker logs milvus19530-etcd
            
        - if: fromJSON(inputs.start) && runner.os == 'Windows'
          name: show logs
          shell: bash
          working-directory: ${{ github.workspace }}
          run: |
            for port in ${{ inputs.ports }}; do
              if netstat -an | grep -q ".*:$port.*LISTEN"; then
                echo "Port $port is open."
              else
                echo "Port $port is not open."
              fi
            done

        - if: fromJSON(inputs.start) && runner.os == 'macOS'
          shell: bash
          run: |
            docker ps
            docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' milvus19530-standalone
            echo "==========================="
            colima status
            echo "==========================="
            docker network inspect bridge
            echo "==========================="